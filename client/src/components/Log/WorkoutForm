// WorkoutForm.js
import React from "react";
import { useWorkoutContext } from "../../contexts/WorkoutContext";

const WorkoutForm = () => {
  // Using the custom hook to access context values
  const {
    MUSCLE,
    muscleGroups,
    selectedMuscleGroup,
    exercises,
    selectedExercise,
    selectedExerciseDescription,
    reps,
    setReps,
    weightLoad,
    setWeightLoad,
    handleMuscleGroupSelection,
    handleExerciseSelection,
    handleSubmit,
    editingWorkout,
    handleCancelEdit,
  } = useWorkoutContext();

  return (
    <div className="container addlog bg-dark text-white rounded py-5 px-3">
      <h3 className="text-warning fw-bold">Log Workout</h3>
      <div>
      {!editingWorkout && selectedExercise && exercises.length > 0 && (
            <div>
              <p className="text-secondary">{selectedExerciseDescription}</p>
              <p className="text-secondary">
                <strong>Difficulty:</strong>{" "}
                {exercises[0].difficulty.toUpperCase()}
              </p>
              <p className="text-secondary">
                <strong>Type:</strong> {exercises[0].type.toUpperCase()}
              </p>
            </div>
          )}
      </div>
      <form onSubmit={handleSubmit}>
        <div className="text-start">
          <label htmlFor="muscleGroup" className="form-label text-secondary">
            Muscle Group
          </label>
          <select
            id="muscleGroup"
            className="form-select"
            value={selectedMuscleGroup}
            onChange={handleMuscleGroupSelection}
          >
            {/* Mapping over muscleGroups to create options */}
            <option value="">Select Muscle Group</option>
            {muscleGroups.map((group) => (
              <option key={group} value={group}>
                {MUSCLE[group]}
              </option>
            ))}
          </select>
        </div>
        <div className="text-start">
          <label htmlFor="exercise" className="form-label text-secondary">
            Exercise
          </label>
          <select
            id="exercise"
            className="form-select"
            value={selectedExercise}
            onChange={handleExerciseSelection}
          >
            {/* Mapping over exercises to create options */}
            <option value="">Select Exercise</option>
            {exercises.map((exercise) => (
              <option key={exercise.name} value={exercise.name}>
                {exercise.name}
              </option>
            ))}
          </select>
        </div>
        <div className="row row-cols-sm-2 pt-4">
          <div className="col">
            <div className="input-group flex-nowrap">
              <span className="input-group-text" id="addon-wrapping">
                Weight
              </span>
              <input
                type="number"
                id="weightLoad"
                value={weightLoad}
                onChange={(e) => setWeightLoad(e.target.value)}
                required
                min="1"
                className="form-control form-control-lg"
              />
            </div>
          </div>
          <div className="col">
            <div className="input-group flex-nowrap">
              <span className="input-group-text" id="addon-wrapping">
                Reps
              </span>
              <input
                type="number"
                id="reps"
                value={reps}
                onChange={(e) => setReps(e.target.value)}
                required
                min="1"
                className="form-control form-control-lg"
              />
            </div>
          </div>
        </div>
        <div className="form-buttons-container">
          {/* Button for submitting the form */}
          <button type="submit" className="btn btn-warning">
            {editingWorkout ? "Update" : "Log Workout"}
          </button>
          {/* Button for cancelling edit mode */}
          {editingWorkout && (
            <button
              type="button"
              className="btn btn-warning"
              onClick={handleCancelEdit}
            >
              Cancel
            </button>
          )}
        </div>
      </form>
    </div>
  );
};

export default WorkoutForm;
